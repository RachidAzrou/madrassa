import React, { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { 
  ChevronLeft, ChevronRight, Calendar as CalendarIcon, Plus, Filter, 
  FilePlus, GraduationCap, Palmtree, PartyPopper, Pencil, BookOpen, Timer,
  MapPin, Clock, Search, XCircle
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from '@/hooks/use-toast';
import { Switch } from "@/components/ui/switch";
import { PremiumHeader } from '@/components/layout/premium-header';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";

// Define types
interface CalendarEvent {
  id: string;
  title: string;
  date: string; // ISO format date
  startTime: string;
  endTime: string;
  location: string;
  type: 'exam' | 'class' | 'holiday' | 'event';
  description?: string;
  courseId?: string; // Voor examen of les
  courseName?: string;
  classId?: string; // Voor examen of les
  className?: string;
  isRecurring?: boolean; // Geeft aan of het een terugkerend evenement is
  recurrencePattern?: 'daily' | 'weekly' | 'monthly' | 'yearly'; // Type herhaling
  recurrenceEndDate?: string; // Einddatum van de herhaling
}

// Helper functies voor datumformatering
const formatDate = (date: Date): string => {
  return date.toLocaleDateString('nl-NL', { day: 'numeric', month: 'numeric' });
};

const formatDayDate = (date: Date): string => {
  return date.toLocaleDateString('nl-NL', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' });
};

export default function Calendar() {
  const { toast } = useToast();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [view, setView] = useState<'month' | 'week' | 'day'>('month');
  const [filter, setFilter] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [isAddEventDialogOpen, setIsAddEventDialogOpen] = useState(false);
  const [newEvent, setNewEvent] = useState({
    title: '',
    date: new Date().toISOString().split('T')[0],
    startTime: '09:00',
    endTime: '10:00',
    location: '',
    type: 'event' as 'exam' | 'class' | 'holiday' | 'event',
    description: '',
    courseId: '',
    courseName: '',
    classId: '',
    className: '',
    isRecurring: false,
    recurrencePattern: 'weekly' as 'daily' | 'weekly' | 'monthly' | 'yearly',
    recurrenceEndDate: new Date(new Date().setMonth(new Date().getMonth() + 3)).toISOString().split('T')[0] // 3 maanden vooruit als standaard
  });
  
  const [activeTab, setActiveTab] = useState<'exam' | 'class' | 'holiday' | 'event'>('event');

  // Get month name, year - in Dutch
  const monthNames = ["Januari", "Februari", "Maart", "April", "Mei", "Juni", 
                      "Juli", "Augustus", "September", "Oktober", "November", "December"];
  const month = monthNames[currentDate.getMonth()];
  const year = currentDate.getFullYear();

  // Fetch calendar events for the current month/view
  const { data, isLoading, isError } = useQuery<{ events: CalendarEvent[] }>({
    queryKey: ['/api/calendar/events', 
      { 
        year: currentDate.getFullYear(), 
        month: currentDate.getMonth() + 1,
        view,
        filter,
        search: searchTerm
      }
    ],
    staleTime: 30000,
  });

  const events: CalendarEvent[] = data?.events || [];
  
  // Filter evenementen gebaseerd op filter en zoekterm
  const filteredEvents = events.filter(event => {
    // Eerst filteren op type
    const typeMatch = filter === 'all' || event.type === filter;
    
    // Dan filteren op zoekterm als er een is
    const searchMatch = !searchTerm || 
      event.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
      (event.description && event.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (event.location && event.location.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (event.courseName && event.courseName.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (event.className && event.className.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return typeMatch && searchMatch;
  });

  // Navigate to previous/next period based on current view
  const navigatePrevious = () => {
    const newDate = new Date(currentDate);
    if (view === 'month') {
      newDate.setMonth(newDate.getMonth() - 1);
    } else if (view === 'week') {
      newDate.setDate(newDate.getDate() - 7);
    } else {
      newDate.setDate(newDate.getDate() - 1);
    }
    setCurrentDate(newDate);
  };

  const navigateNext = () => {
    const newDate = new Date(currentDate);
    if (view === 'month') {
      newDate.setMonth(newDate.getMonth() + 1);
    } else if (view === 'week') {
      newDate.setDate(newDate.getDate() + 7);
    } else {
      newDate.setDate(newDate.getDate() + 1);
    }
    setCurrentDate(newDate);
  };

  // Generate calendar days for the month view
  const generateCalendarDays = () => {
    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    // Correct for Monday as first day of week (European standard)
    // Sunday is 0 in JS Date, we want to display Monday (1) as first day
    let startingDayOfWeek = firstDay.getDay() - 1; // subtract 1 to start from Monday
    if (startingDayOfWeek === -1) startingDayOfWeek = 6; // If Sunday (0-1=-1), make it the 7th column (index 6)
    
    const daysInMonth = lastDay.getDate();
    
    // Create array of day objects
    const days = [];
    
    // Add empty cells for days before the first day of month
    for (let i = 0; i < startingDayOfWeek; i++) {
      // Als eerste dag van de maand niet op maandag valt, voeg dagen toe van vorige maand
      const prevMonthLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);
      const prevMonthDay = new Date(prevMonthLastDay);
      prevMonthDay.setDate(prevMonthLastDay.getDate() - startingDayOfWeek + i + 1);
      
      const dateStr = prevMonthDay.toISOString().split('T')[0];
      const dayEvents = events.filter(event => event.date.startsWith(dateStr));
      
      days.push({ 
        day: prevMonthDay.getDate(), 
        date: prevMonthDay, 
        events: dayEvents,
        isCurrentMonth: false 
      });
    }
    
    // Add days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
      const dateStr = date.toISOString().split('T')[0];
      
      // Find events for this day
      const dayEvents = events.filter(event => event.date.startsWith(dateStr));
      
      // Check if this is today
      const isToday = new Date().toDateString() === date.toDateString();
      
      days.push({
        day,
        date,
        events: dayEvents,
        isCurrentMonth: true,
        isToday
      });
    }
    
    // Add days from next month to complete the calendar grid (42 cells for 6 rows)
    const remainingCells = 42 - days.length;
    if (remainingCells > 0) {
      for (let day = 1; day <= remainingCells; day++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, day);
        const dateStr = date.toISOString().split('T')[0];
        
        // Find events for this day
        const dayEvents = events.filter(event => event.date.startsWith(dateStr));
        
        days.push({
          day,
          date,
          events: dayEvents,
          isCurrentMonth: false
        });
      }
    }
    
    return days;
  };

  // Mutation voor het maken van een nieuw event
  const createEventMutation = useMutation({
    mutationFn: (eventData: typeof newEvent) => {
      return apiRequest('/api/calendar/events', {
        method: 'POST',
        body: eventData
      });
    },
    onSuccess: () => {
      // Invalidate query cache to refresh data
      queryClient.invalidateQueries({
        queryKey: ['/api/calendar/events'],
      });
      
      // Reset form and close dialog
      setNewEvent({
        title: '',
        date: new Date().toISOString().split('T')[0],
        startTime: '09:00',
        endTime: '10:00',
        location: '',
        type: 'event',
        description: '',
        courseId: '',
        courseName: '',
        classId: '',
        className: '',
        isRecurring: false,
        recurrencePattern: 'weekly' as 'daily' | 'weekly' | 'monthly' | 'yearly',
        recurrenceEndDate: new Date(new Date().setMonth(new Date().getMonth() + 3)).toISOString().split('T')[0]
      });
      setActiveTab('event');
      setIsAddEventDialogOpen(false);
      
      // Toon succesmelding
      toast({
        title: "Evenement toegevoegd",
        description: "Het evenement is succesvol toegevoegd aan de kalender.",
        variant: "default",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Fout bij toevoegen",
        description: error.message || "Er is een fout opgetreden bij het toevoegen van het evenement.",
        variant: "destructive",
      });
    }
  });

  const handleAddEvent = () => {
    // Open dialoogvenster
    setIsAddEventDialogOpen(true);
  };
  
  const handleTabChange = (tab: 'exam' | 'class' | 'holiday' | 'event') => {
    setActiveTab(tab);
    setNewEvent({
      ...newEvent,
      type: tab
    });
  };
  
  const handleSubmitEvent = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newEvent.title || !newEvent.date) {
      toast({
        title: "Onvolledige gegevens",
        description: "Vul een titel en datum in om het evenement toe te voegen.",
        variant: "destructive",
      });
      return;
    }
    
    // Extra validatie voor examen of les
    if ((newEvent.type === 'exam' || newEvent.type === 'class') && 
        (!newEvent.courseId || !newEvent.classId)) {
      toast({
        title: "Onvolledige gegevens",
        description: `Selecteer een vak en klas voor dit ${newEvent.type === 'exam' ? 'examen' : 'les'}.`,
        variant: "destructive",
      });
      return;
    }
    
    // Validatie voor wekelijkse herhaling
    if (newEvent.isRecurring) {
      if (!newEvent.recurrenceEndDate) {
        toast({
          title: "Onvolledige gegevens",
          description: "Selecteer een einddatum voor de herhaling.",
          variant: "destructive",
        });
        return;
      }
      
      // Controleer of einddatum na startdatum ligt
      const startDate = new Date(newEvent.date);
      const endDate = new Date(newEvent.recurrenceEndDate);
      
      if (endDate <= startDate) {
        toast({
          title: "Ongeldige datums",
          description: "De einddatum van de herhaling moet na de startdatum liggen.",
          variant: "destructive",
        });
        return;
      }
    }
    
    createEventMutation.mutate(newEvent);
  };

  const handleFilterChange = (value: string) => {
    setFilter(value);
  };

  // Get event colors based on event type
  const getEventColors = (type: string) => {
    switch (type) {
      case 'exam':
        return { 
          bgColor: "#FFEBEE", // Lichtroze 
          borderColor: "#E53935" // Rood
        };
      case 'class':
        return { 
          bgColor: "#E3F2FD", // Lichtblauw
          borderColor: "#1E88E5" // Blauw
        };
      case 'holiday':
        return { 
          bgColor: "#E8F5E9", // Lichtgroen
          borderColor: "#43A047" // Groen
        };
      case 'event':
        return { 
          bgColor: "#FFF9C4", // Lichtgeel
          borderColor: "#FDD835" // Geel
        };
      default:
        return { 
          bgColor: "#E0E0E0", // Lichtgrijs
          borderColor: "#757575" // Grijs
        };
    }
  };

  const calendarDays = generateCalendarDays();

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Premium header component */}
      <PremiumHeader 
        title="Kalender" 
        path="Onderwijs > Kalender" 
        icon={CalendarIcon} 
      />
      
      <div className="px-6 py-6 flex-1 space-y-6">
      
      {/* Zoekbalk - onder de paginatitel geplaatst */}
      <div className="mb-4">
        <div className="relative">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
          <Input
            type="search"
            placeholder="Zoek evenementen..."
            className="pl-8 bg-white"
            value={searchTerm || ""}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <XCircle
              className="absolute right-3 top-2.5 h-4 w-4 text-gray-400 cursor-pointer hover:text-gray-600"
              onClick={() => setSearchTerm("")}
            />
          )}
        </div>
      </div>
      
      {/* Controls and filters - onder de zoekbalk */}
      <div className="flex flex-col gap-4 mb-4">
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
          <div>
            <div className="flex border rounded-md overflow-hidden">
              <button 
                onClick={() => setView('month')}
                className={`px-4 py-2 text-sm font-medium ${view === 'month' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-white text-gray-700 hover:bg-gray-50'}`}
              >
                Maand
              </button>
              <button 
                onClick={() => setView('week')}
                className={`px-4 py-2 text-sm font-medium ${view === 'week' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-white text-gray-700 hover:bg-gray-50'}`}
              >
                Week
              </button>
              <button 
                onClick={() => setView('day')}
                className={`px-4 py-2 text-sm font-medium ${view === 'day' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-white text-gray-700 hover:bg-gray-50'}`}
              >
                Dag
              </button>
            </div>
          </div>
          <div className="flex items-center space-x-3 flex-wrap gap-3">
            <Select value={filter} onValueChange={handleFilterChange}>
              <SelectTrigger className="w-[150px]">
                <SelectValue placeholder="Filter Evenementen" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Alle Evenementen</SelectItem>
                <SelectItem value="exam">Examens</SelectItem>
                <SelectItem value="class">Lessen</SelectItem>
                <SelectItem value="holiday">Vakanties</SelectItem>
                <SelectItem value="event">Activiteiten</SelectItem>
              </SelectContent>
            </Select>
            <Button 
              onClick={handleAddEvent}
              variant="default"
              size="default"
              className="bg-[#1e40af] hover:bg-[#1e40af]/90 flex items-center"
            >
              <Plus className="mr-2 h-4 w-4" />
              <span>Evenement Toevoegen</span>
            </Button>
          </div>
        </div>
       
        {/* Calendar navigation header */}
        <div className="flex items-center justify-between bg-gray-50 p-3 rounded-md border border-gray-200">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={navigatePrevious}
            className="border-0 bg-white shadow-sm"
          >
            <ChevronLeft className="h-4 w-4" />
            <span className="ml-1">Vorige</span>
          </Button>
          
          <h2 className="text-lg font-semibold">
            {view === 'month' ? `${month} ${year}` : 
             view === 'week' ? `Week van ${formatDate(currentDate)}` : 
             formatDayDate(currentDate)}
          </h2>
          
          <Button 
            variant="outline" 
            size="sm" 
            onClick={navigateNext}
            className="border-0 bg-white shadow-sm"
          >
            <span className="mr-1">Volgende</span>
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      {/* Calendar body - conditionally render based on view */}
      {view === 'month' && (
        <div className="rounded-lg overflow-hidden border border-gray-200">
          {/* Day labels */}
          <div className="grid grid-cols-7 bg-gray-100">
            {["Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag"].map((day, i) => (
              <div key={i} className="py-2 px-3 text-sm font-medium text-gray-700 text-center">
                {day}
              </div>
            ))}
          </div>
          
          {/* Calendar days grid */}
          <div className="grid grid-cols-7 auto-rows-fr bg-white">
            {calendarDays.map((day, index) => (
              <div 
                key={index} 
                className={`
                  min-h-[100px] p-1 border-t border-l
                  ${day.isCurrentMonth ? 'bg-white' : 'bg-gray-50 text-gray-400'} 
                  ${day.isToday ? 'ring-2 ring-inset ring-[#1e40af]' : ''}
                  ${index % 7 === 6 ? 'border-r' : ''}
                  ${index >= calendarDays.length - 7 ? 'border-b' : ''}
                `}
              >
                <div className="flex flex-col h-full">
                  <div className="flex justify-between items-center">
                    <span className={`text-sm font-medium p-1 ${day.isToday ? 'bg-[#1e40af] text-white rounded-full w-6 h-6 flex items-center justify-center' : ''}`}>
                      {day.day}
                    </span>
                  </div>
                  
                  {/* Events for this day */}
                  <div className="flex-grow overflow-y-auto space-y-1 mt-1">
                    {day.events.slice(0, 3).map((event, idx) => {
                      const colors = getEventColors(event.type);
                      return (
                        <div 
                          key={idx} 
                          className="text-xs rounded px-1 py-0.5 truncate"
                          style={{ 
                            backgroundColor: colors.bgColor,
                            borderLeft: `2px solid ${colors.borderColor}`
                          }}
                        >
                          {event.title}
                        </div>
                      );
                    })}
                    
                    {/* If there are more events than we can display */}
                    {day.events.length > 3 && (
                      <div className="text-xs text-gray-500 pl-1">
                        +{day.events.length - 3} meer
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {view === 'week' && (
        <div className="rounded-lg overflow-hidden border border-gray-200">
          <div className="grid grid-cols-8 bg-white">
            {/* Time slots column */}
            <div className="border-r">
              <div className="h-12 border-b"></div>
              {Array.from({ length: 12 }).map((_, i) => (
                <div key={i} className="h-16 border-b relative">
                  <span className="absolute -top-3 left-2 text-xs text-gray-500">
                    {`${i + 8}:00`}
                  </span>
                </div>
              ))}
            </div>
            
            {/* Days columns */}
            {Array.from({ length: 7 }).map((_, dayIndex) => {
              const dayDate = new Date(currentDate);
              dayDate.setDate(currentDate.getDate() - currentDate.getDay() + dayIndex + 1);
              const dayEvents = events.filter(event => 
                event.date.startsWith(dayDate.toISOString().split('T')[0])
              );
              
              const isToday = new Date().toDateString() === dayDate.toDateString();
              
              return (
                <div key={dayIndex} className="border-r last:border-r-0">
                  {/* Day header */}
                  <div className={`h-12 p-2 border-b text-center ${isToday ? 'bg-blue-50' : ''}`}>
                    <div className="text-sm font-medium">
                      {dayDate.toLocaleDateString('nl-NL', { weekday: 'short' })}
                    </div>
                    <div className={`text-sm ${isToday ? 'text-[#1e40af] font-semibold' : ''}`}>
                      {dayDate.getDate()}
                    </div>
                  </div>
                  
                  {/* Time slots */}
                  {Array.from({ length: 12 }).map((_, timeIndex) => {
                    const hourEvents = dayEvents.filter(event => {
                      const eventHour = parseInt(event.startTime.split(':')[0]);
                      return eventHour === timeIndex + 8;
                    });
                    
                    return (
                      <div key={timeIndex} className="h-16 border-b relative p-1">
                        {hourEvents.map((event, idx) => {
                          const colors = getEventColors(event.type);
                          return (
                            <div 
                              key={idx} 
                              className="text-xs rounded p-1 truncate mb-1 text-gray-800"
                              style={{ 
                                backgroundColor: colors.bgColor,
                                borderLeft: `2px solid ${colors.borderColor}`
                              }}
                            >
                              <div className="font-medium">{event.title}</div>
                              <div className="text-xs opacity-75">{event.startTime} - {event.endTime}</div>
                            </div>
                          );
                        })}
                      </div>
                    );
                  })}
                </div>
              );
            })}
          </div>
        </div>
      )}
      
      {view === 'day' && (
        <div className="rounded-lg overflow-hidden border border-gray-200">
          <div className="p-4 bg-gray-50 border-b text-center">
            <h3 className="text-lg font-semibold">{formatDayDate(currentDate)}</h3>
          </div>
          
          <div className="grid grid-cols-[80px_1fr] bg-white">
            {/* Time slots */}
            {Array.from({ length: 14 }).map((_, i) => {
              const hour = i + 7; // Start at 7 AM
              const hourStr = `${hour}:00`;
              
              // Find events that start during this hour
              const hourEvents = events.filter(event => {
                const eventDate = event.date;
                const eventHour = parseInt(event.startTime.split(':')[0]);
                return eventDate.startsWith(currentDate.toISOString().split('T')[0]) && eventHour === hour;
              });
              
              return (
                <React.Fragment key={i}>
                  <div className="p-2 border-b border-r text-xs text-gray-500 text-right">
                    {hourStr}
                  </div>
                  <div className="p-1 border-b relative">
                    {hourEvents.map((event, idx) => {
                      const colors = getEventColors(event.type);
                      return (
                        <div 
                          key={idx} 
                          className="text-sm rounded-sm p-2 mb-1"
                          style={{ 
                            backgroundColor: colors.bgColor,
                            borderLeft: `3px solid ${colors.borderColor}`
                          }}
                        >
                          <div className="font-medium">{event.title}</div>
                          <div className="text-xs flex items-center mt-1">
                            <Clock className="h-3 w-3 mr-1" /> 
                            {event.startTime} - {event.endTime}
                          </div>
                          {event.location && (
                            <div className="text-xs flex items-center mt-1">
                              <MapPin className="h-3 w-3 mr-1" /> 
                              {event.location}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </React.Fragment>
              );
            })}
          </div>
        </div>
      )}
      
      {/* Add Event Dialog */}
      <Dialog open={isAddEventDialogOpen} onOpenChange={setIsAddEventDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold">Evenement Toevoegen</DialogTitle>
            <DialogDescription>
              Voeg een nieuw evenement toe aan de academische kalender
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4">
            <div className="grid grid-cols-4 gap-1">
              <button 
                onClick={() => handleTabChange('exam')}
                className={`px-3 py-2 text-sm font-medium rounded-sm flex items-center justify-center gap-2 ${activeTab === 'exam' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-gray-200'}`}
              >
                <FilePlus className="h-4 w-4" />
                <span>Examen</span>
              </button>
              <button 
                onClick={() => handleTabChange('class')}
                className={`px-3 py-2 text-sm font-medium rounded-sm flex items-center justify-center gap-2 ${activeTab === 'class' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-gray-200'}`}
              >
                <BookOpen className="h-4 w-4" />
                <span>Les</span>
              </button>
              <button 
                onClick={() => handleTabChange('holiday')}
                className={`px-3 py-2 text-sm font-medium rounded-sm flex items-center justify-center gap-2 ${activeTab === 'holiday' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-gray-200'}`}
              >
                <Palmtree className="h-4 w-4" />
                <span>Vakantie</span>
              </button>
              <button 
                onClick={() => handleTabChange('event')}
                className={`px-3 py-2 text-sm font-medium rounded-sm flex items-center justify-center gap-2 ${activeTab === 'event' 
                  ? 'bg-[#1e40af] text-white' 
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border border-gray-200'}`}
              >
                <PartyPopper className="h-4 w-4" />
                <span>Evenement</span>
              </button>
            </div>
          </div>
          
          <form onSubmit={handleSubmitEvent}>
            {/* Common fields for all event types */}
            <div className="space-y-4 pt-4 border-t mt-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="title">Titel</Label>
                  <Input
                    id="title"
                    value={newEvent.title}
                    onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}
                    placeholder="Titel van het evenement"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="date">Datum</Label>
                  <Input
                    id="date"
                    type="date"
                    value={newEvent.date}
                    onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="startTime">Starttijd</Label>
                  <Input
                    id="startTime"
                    type="time"
                    value={newEvent.startTime}
                    onChange={(e) => setNewEvent({ ...newEvent, startTime: e.target.value })}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="endTime">Eindtijd</Label>
                  <Input
                    id="endTime"
                    type="time"
                    value={newEvent.endTime}
                    onChange={(e) => setNewEvent({ ...newEvent, endTime: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="location">Locatie</Label>
                <Input
                  id="location"
                  value={newEvent.location}
                  onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}
                  placeholder="Locatie"
                />
              </div>
            </div>
            
            {/* Conditional fields based on event type */}
            {activeTab === 'exam' && (
              <div className="space-y-4 pt-4 border-t mt-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="courseId">Vak</Label>
                    <Select
                      value={newEvent.courseId}
                      onValueChange={(value) => setNewEvent({ ...newEvent, courseId: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecteer een vak" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">Arabisch</SelectItem>
                        <SelectItem value="2">Islamitische Studies</SelectItem>
                        <SelectItem value="3">Koranrecitatie</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="classId">Klas</Label>
                    <Select
                      value={newEvent.classId}
                      onValueChange={(value) => setNewEvent({ ...newEvent, classId: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecteer een klas" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">Klas 1A</SelectItem>
                        <SelectItem value="2">Klas 2B</SelectItem>
                        <SelectItem value="3">Klas 3C</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="examDescription">Beschrijving</Label>
                  <Textarea
                    id="examDescription"
                    value={newEvent.description}
                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
                    placeholder="Extra informatie over het examen"
                    rows={3}
                  />
                </div>
              </div>
            )}
            
            {activeTab === 'class' && (
              <div className="space-y-4 pt-4 border-t mt-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="courseId">Vak</Label>
                    <Select
                      value={newEvent.courseId}
                      onValueChange={(value) => setNewEvent({ ...newEvent, courseId: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecteer een vak" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">Arabisch</SelectItem>
                        <SelectItem value="2">Islamitische Studies</SelectItem>
                        <SelectItem value="3">Koranrecitatie</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="classId">Klas</Label>
                    <Select
                      value={newEvent.classId}
                      onValueChange={(value) => setNewEvent({ ...newEvent, classId: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Selecteer een klas" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">Klas 1A</SelectItem>
                        <SelectItem value="2">Klas 2B</SelectItem>
                        <SelectItem value="3">Klas 3C</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="classDescription">Beschrijving</Label>
                  <Textarea
                    id="classDescription"
                    value={newEvent.description}
                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
                    placeholder="Extra informatie over de les"
                    rows={3}
                  />
                </div>
                
                <div className="flex items-center space-x-2">
                  <Switch
                    id="recurring"
                    checked={newEvent.isRecurring}
                    onCheckedChange={(checked) => setNewEvent({ ...newEvent, isRecurring: checked })}
                  />
                  <Label htmlFor="recurring">Wekelijks herhalen</Label>
                </div>
                
                {newEvent.isRecurring && (
                  <div className="space-y-2">
                    <Label htmlFor="recurrenceEndDate">Tot datum</Label>
                    <Input
                      id="recurrenceEndDate"
                      type="date"
                      value={newEvent.recurrenceEndDate}
                      onChange={(e) => setNewEvent({ ...newEvent, recurrenceEndDate: e.target.value })}
                    />
                  </div>
                )}
              </div>
            )}
            
            {activeTab === 'holiday' && (
              <div className="space-y-4 pt-4 border-t mt-4">
                <div className="space-y-2">
                  <Label htmlFor="holidayDescription">Beschrijving</Label>
                  <Textarea
                    id="holidayDescription"
                    value={newEvent.description}
                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
                    placeholder="Beschrijving van de vakantie"
                    rows={3}
                  />
                </div>
              </div>
            )}
            
            {activeTab === 'event' && (
              <div className="space-y-4 pt-4 border-t mt-4">
                <div className="space-y-2">
                  <Label htmlFor="eventDescription">Beschrijving</Label>
                  <Textarea
                    id="eventDescription"
                    value={newEvent.description}
                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
                    placeholder="Beschrijving van het evenement"
                    rows={3}
                  />
                </div>
              </div>
            )}
          
            <DialogFooter className="mt-6">
              <Button type="button" variant="outline" onClick={() => setIsAddEventDialogOpen(false)}>
                Annuleren
              </Button>
              <Button 
                type="submit" 
                className="bg-[#1e40af] text-white hover:bg-[#1e40af]/90"
                disabled={createEventMutation.isPending}
              >
                {createEventMutation.isPending ? "Bezig met toevoegen..." : "Toevoegen"}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}